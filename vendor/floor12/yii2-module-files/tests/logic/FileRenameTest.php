<?php
/**
 * Created by PhpStorm.
 * User: floor12
 * Date: 07.01.2018
 * Time: 12:45
 */

namespace floor12\files\tests\logic;


use ArgumentCountError;
use floor12\files\logic\FileRename;
use floor12\files\models\File;
use floor12\files\models\FileType;
use floor12\files\tests\TestCase;
use Yii;

class FileRenameTest extends TestCase
{

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->setApp();
    }

    public function tearDown(): void
    {
        $this->clearDb();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /** Пробуем не передать данные
     *
     */
    public function testNoParams()
    {
        $this->expectException(ArgumentCountError::class);
        $model = new FileRename();
    }

    /** Не передаем ID файла
     *
     *
     */
    public function testEmptyId()
    {
        $this->expectExceptionMessage("ID of file is not set.");
        $this->expectException(yii\web\BadRequestHttpException::class);
        $data = [];
        $model = new FileRename($data);
    }

    /** Не передаем ID файла
     *
     *
     */
    public function testEmptyTitle()
    {
        $this->expectExceptionMessage("Title of file is not set.");
        $this->expectException(yii\web\BadRequestHttpException::class);
        $data = ['id' => 1];
        $model = new FileRename($data);
    }

    /** Передаем ID несуществующего файла
     *
     *
     */
    public function testFileNotExitstInDb()
    {
        $this->expectExceptionMessage("File not found.");
        $this->expectException(yii\web\NotFoundHttpException::class);
        $data = ['id' => 100, 'title' => 'new name'];
        $model = new FileRename($data);
    }

    /** Создаем файл и пробуем его переименовать.
     */
    public function testGoodRename()
    {
        $oldName = "Old name";
        $newName = "New name";

        $model = new File();
        $model->title = $oldName;
        $model->class = 'testClassName';
        $model->filename = 'testFileName/jpg';
        $model->created = time();
        $model->field = 'images';
        $model->size = 50000;
        $model->user_id = 1;
        $model->content_type = 'image/jpeg';
        $model->type = FileType::IMAGE;
        $model->save();
        $this->assertFalse($model->isNewRecord);

        $data = [
            'id' => 1,
            'title' => $newName,
        ];
        $ret = Yii::createObject(FileRename::class, [$data])->execute();
        $this->assertEquals($ret, $newName);

        $model->refresh();
        $this->assertEquals($model->title, $newName);

    }


}
